{"version":3,"file":"static/webpack/static/development/pages/_app.js.8d793da15c99a735a4a0.hot-update.js","sources":["webpack:///./components/Cart.js"],"sourcesContent":["import React from \"react\";\nimport { Query, Mutation } from \"react-apollo\";\nimport { adopt } from \"react-adopt\"; // used to deal with render props issues\nimport gql from \"graphql-tag\";\nimport User from \"./User\";\nimport CartStyles from \"./styles/CartStyles\";\nimport Supreme from \"./styles/Supreme\";\nimport CloseButton from \"./styles/CloseButton\";\nimport SickButton from \"./styles/SickButton\";\nimport CartItem from \"./CartItem\";\nimport calcTotalPrice from \"../lib/calcTotalPrice\";\nimport formatMoney from \"../lib/formatMoney\";\n\nconst LOCAL_STATE_QUERY = gql`\n  query {\n    cartOpen @client # this way, we are telling graphql to grab data from the apollo store and not the server\n  }\n`;\n\nconst TOGGLE_CART_MUTATION = gql`\n  mutation {\n    toggleCart @client\n  }\n`;\n\n/* eslint-disable */\nconst Composed = adopt({\n  // we could easily return just <User />, <Mutation />, <Query /> as the value, but we want to circumvent the proptype error\n  user: ({ render }) => <User>{render}</User>,\n  toggleCart: ({ render }) => (\n    <Mutation mutation={TOGGLE_CART_MUTATION}>{render}</Mutation>\n  ),\n  localState: ({ render }) => <Query query={LOCAL_STATE_QUERY}>{render}</Query>\n});\n/* eslint-enable */\n\n// * Since we passed the result of the current user query to its potential children, we can access them here\n\nconst Cart = () => (\n  <Composed>\n    {({ user, toggleCart, localState }) => {\n      const me = user.data.me;\n      if (!me) return null;\n      return (\n        <>\n          {loading ? (\n            <p>Loading data</p>\n          ) : (\n            <CartStyles open={localState.data.cartOpen}>\n              {/* we are able to toggle the cart on the apollo state from here */}\n              <header>\n                <CloseButton title=\"close\" onClick={toggleCart}>\n                  &times;\n                </CloseButton>\n                <Supreme>{me.name}'s Cart</Supreme>\n                <p>You have {me.cart.length} Item(s) in your cart.</p>\n              </header>\n              <ul>\n                {me.cart.map(cartItem => (\n                  <CartItem key={cartItem.id} cartItem={cartItem} />\n                ))}\n              </ul>\n              <footer>\n                <p>{formatMoney(calcTotalPrice(me.cart))}</p>\n                <SickButton>Checkout</SickButton>\n              </footer>\n            </CartStyles>\n          )}\n        </>\n      );\n    }}\n  </Composed>\n);\n\nexport default Cart;\nexport { LOCAL_STATE_QUERY, TOGGLE_CART_MUTATION };\n"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAMA;AAMA;AACA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AANA;AAQA;AAEA;AACA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADA;AAIA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAMA;AAhCA;AACA;AAmCA;;;;;A","sourceRoot":""}